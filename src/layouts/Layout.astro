---
import { AstroFont } from "astro-font";
import Nav from "../components/Nav.astro";
import Footer from "../components/Footer.astro";

interface Props {
  title?: string;
  image?: string;
  description?: string;
}

const {
  title = 'Jrc Ingenieros y Consultores',
  description = 'Jrc Ingenieros y Consultores es una empresa dedicada a la consultoría y gestión de proyectos en el ámbito de la ingeniería civil y ambiental.',
  image,
} = Astro.props;

---

<!doctype html>
<html lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>

		<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
		<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
		<link rel="manifest" href="/site.webmanifest">

		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
		<meta name="apple-mobile-web-app-title" content="Jrc" />
		<link rel="manifest" href="/site.webmanifest" />
		 <!-- SEO -->
		 <meta name="description" content={description} />
		 <meta name="author" content={'Jose Luis Yana'} />
	 
		 <!-- OG Metatags -->
		 <meta property="og:title" content={title} />
		 <meta property="og:description" content={description} />
		 <meta property="og:image" content={image} />
		<AstroFont
     	 config={[
        {
          name: "Montserrat",
          src: [
            {
              style: 'semibold',
              weight: '600',
              path: './public/fonts/Montserrat-SemiBold.ttf'
            },
			{
              style: 'bold',
              weight: '700',
              path: './public/fonts/Montserrat-Bold.ttf'
            },
          ],
          preload: true,
          display: "swap",
          selector: "body",
          fallback: "sans-serif",
        },
        {
          name: "Open Sans",
          src: [
            {
              weight: '400',
              style: 'normal',
              path: './public/fonts/OpenSans-Regular.ttf'
            },
			{
              weight: '600',
              style: 'semibold',
              path: './public/fonts/OpenSans_SemiCondensed-Bold.ttf'
            }
          ],
          preload: true,
          display: "swap",
          selector: "body > span",
          fallback: "sans-serif",
        },
      ]}
    />

	</head>
	<body>
		<Nav />
		<slot />
		<Footer />
	</body>
</html>

<style is:global>
	 /* --- Definiciones de Variables CSS --- */
	 :root {
            --color-primary: #006A7A; /* Azul Petróleo */
            --color-secondary: #2F3E46; /* Gris Carbón */
            --color-accent: #B89A67; /* Oro Apagado */
            --color-neutral-light: #F4F4F4; /* Gris Perla */
            --color-white: #FFFFFF;
            --font-title: 'Montserrat', sans-serif;
            --font-body: 'Open Sans', sans-serif;
			--header-height: 80px; 
        }

        body {
            font-family: var(--font-body);
            color: var(--color-secondary);
            margin: 0;
            line-height: 1.7; 
            background-color: var(--color-white);
        }
		h1, h2, h3 {
            font-family: var(--font-title);
            font-weight: 700;
            margin-top: 0;
            color: var(--color-primary);
        }
        h2 { font-size: 2.2em; }
        h3 { font-size: 1.5em; color: var(--color-secondary); font-weight: 600;} 

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

		/* --- General Button Styles (Keep as before) --- */
		.btn {
			display: inline-block;
			padding: 12px 30px;
			font-family: var(--font-body);
			font-weight: 600;
			font-size: 1rem;
			text-decoration: none;
			border-radius: 5px;
			cursor: pointer;
			transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
			border: none;
		}

		.btn-primary {
			background-color: var(--color-primary);
			color: var(--color-white);
			box-shadow: 0 4px 10px rgba(0, 106, 122, 0.3);
		}

		.btn-primary:hover,
		.btn-primary:focus {
			background-color: #005663;
			transform: translateY(-2px);
			box-shadow: 0 6px 15px rgba(0, 106, 122, 0.4);
		}
		.section {
			padding: 80px 0;
		}
		.section-title {
			text-align: center;
			font-family: var(--font-title);
			font-size: 2.2rem; 
			color: var(--color-primary); 
			margin-bottom: 60px; 
			position: relative;
		}

		.section-title::after {
			content: '';
			display: block;
			width: 70px;
			height: 4px;
			background-color: var(--color-primary);
			margin: 15px auto 0;
		}

		.hero-standard {
			position: relative;
			background-color: var(--color-secondary); 
			background-image: url('../../public/bg-about.webp');
			background-size: cover;
			background-position: center center;
			background-repeat: no-repeat;
			color: var(--color-white);
			padding: 90px 0; 
			min-height: 30vh; 
			display: flex;
			align-items: center;
			justify-content: center;
			text-align: center;
			overflow: hidden;
		}
		.hero-standard-overlay {
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background-color: rgba(47, 62, 70, 0.75); 
			z-index: 1;
		}
		.hero-standard-content {
			position: relative;
			z-index: 2;
			max-width: 800px;
			margin: 0 auto;
		}
		.hero-standard .hero-title { 
			font-family: var(--font-title);
			color: var(--color-white);
			font-size: 3rem;
			font-weight: 700;
			margin-bottom: 15px;
			line-height: 1.2;
			text-shadow: 1px 1px 3px rgba(0,0,0,0.4);
		}
		.hero-standard .hero-subtitle { 
			font-family: var(--font-body);
			font-size: 1.15rem;
			line-height: 1.7;
			opacity: 0.9;
			max-width: 700px;
			margin: 0 auto;
		}
		.animate-on-scroll {
			opacity: 0;
			transform: translateY(40px);
			transition: opacity 0.6s ease-out, transform 0.6s ease-out;
		}
		.animate-on-scroll.visible {
			opacity: 1;
			transform: translateY(0);
		}
		html {
			scroll-behavior: smooth;
		}
		@keyframes fadeInUp { 
			to {
				opacity: 1;
				transform: translateX(0);
			}
		}
		@media (max-width: 767px) { 
			.hero-standard { padding: 70px 20px; min-height: 30vh; }
			.hero-standard .hero-title { font-size: 2.2rem; }
			.hero-standard .hero-subtitle { font-size: 1rem; } 
			.section-title {
				font-size: 1.7rem;
				margin-bottom: 40px;
			}
		}

		.services-swiper {
			width: 100%;
			padding-top: 20px;
			padding-bottom: 60px; 
			position: relative;
			overflow: hidden; 
		}

		.swiper-slide {
			display: flex; 
			height: auto; 
			align-items: stretch;
		}

		.swiper-slide:hover .service-card { 
			transform: translateY(-6px);
			box-shadow: 0 8px 30px rgba(47, 62, 70, 0.18);
		}
		.services-swiper .swiper-pagination-bullet {
			background-color: var(--color-secondary); 
			opacity: 0.5;
			transition: background-color 0.3s ease, opacity 0.3s ease;
		}

		.services-swiper .swiper-pagination-bullet-active {
			background-color: var(--color-primary); 
			opacity: 1;
		}

		.services-swiper .swiper-button-prev,
		.services-swiper .swiper-button-next {
			color: var(--color-primary); 
			background-color: rgba(255, 255, 255, 0.873); 
			padding: 5px; 
			transition: color 0.3s ease;
			height: 40px; 
			width: 40px; 
			margin-top: -30px; 
		}

		.services-swiper .swiper-button-prev:hover,
		.services-swiper .swiper-button-next:hover {
			color: var(--color-secondary); 
		}

		.services-swiper .swiper-button-prev::after,
		.services-swiper .swiper-button-next::after {
			font-size: 1.2rem; 
			font-weight: 700;
		}

		@media (max-width: 768px) {
			.services-swiper .swiper-button-prev {
				left: 5px; 
			}
			.services-swiper .swiper-button-next {
				right: 5px; 
			}
			.services-swiper {
				padding-bottom: 50px; 
			}
		}
  </style>

<script is:inline>
    document.addEventListener('DOMContentLoaded', () => {

	if (!document.getElementById('currentYear').textContent) {
        document.getElementById('currentYear').textContent = new Date().getFullYear();
    }	
    const menuToggle = document.getElementById('menuToggle');
    const navList = document.getElementById('navList');

    if (menuToggle && navList) {
        menuToggle.addEventListener('click', () => {

            navList.classList.toggle('nav-active');
            menuToggle.classList.toggle('active');

            const isExpanded = navList.classList.contains('nav-active');
            menuToggle.setAttribute('aria-expanded', isExpanded);
        });

        const navLinks = navList.querySelectorAll('a');
        navLinks.forEach(link => {
            link.addEventListener('click', () => {
                if (navList.classList.contains('nav-active')) {
                    navList.classList.remove('nav-active');
                    menuToggle.classList.remove('active');
                    menuToggle.setAttribute('aria-expanded', 'false');
                }
            });
        });

        document.addEventListener('click', (event) => {
            const isClickInsideNav = navList.contains(event.target);
            const isClickOnToggle = menuToggle.contains(event.target);

            if (!isClickInsideNav && !isClickOnToggle && navList.classList.contains('nav-active')) {
                navList.classList.remove('nav-active');
                menuToggle.classList.remove('active');
                menuToggle.setAttribute('aria-expanded', 'false');
            }
        });
		const expandableTriggers = document.querySelectorAll('.expandable-trigger');

		expandableTriggers.forEach(trigger => {
			trigger.addEventListener('click', function() {
				const contentId = this.getAttribute('aria-controls');
				const content = document.getElementById(contentId);
				const isExpanded = this.getAttribute('aria-expanded') === 'true';

				if (content) {
					if (isExpanded) {
						this.setAttribute('aria-expanded', 'false');
						this.querySelector('.expandable-icon').textContent = '+';
						content.style.maxHeight = null; 
						content.classList.remove('open');
					} else {
						this.setAttribute('aria-expanded', 'true');
						this.querySelector('.expandable-icon').textContent = '-'; 
						content.classList.add('open');
						content.style.maxHeight = content.scrollHeight + "px"; 
					}
				}
			});
		});

		// Scroll Animation
		const animatedElements = document.querySelectorAll('.animate-on-scroll');
		const observer = new IntersectionObserver((entries) => {
			entries.forEach(entry => {
				if (entry.isIntersecting) {
					entry.target.classList.add('visible');
					// observer.unobserve(entry.target); // Optional: stop observing after first animation
				}
			});
		}, { threshold: 0.1 });
		animatedElements.forEach(el => { observer.observe(el); });
    }
});

</script>

<script is:inline>
	document.addEventListener('DOMContentLoaded', () => {

    function smoothScrollTo(targetElement, offset = 0) { 
        if (targetElement) {
            const targetPosition = targetElement.getBoundingClientRect().top + window.pageYOffset - offset;
            window.scrollTo({
                top: targetPosition,
                behavior: 'smooth'
            });
        }
    }

    function scrollToHash() {
        if (window.location.hash) {
            const targetId = window.location.hash.substring(1); 
            const targetElement = document.getElementById(targetId);
            if (targetElement) {
                setTimeout(() => {
                    const header = document.querySelector('.main-header'); 
                    const headerHeight = header ? header.offsetHeight : 0;
                    smoothScrollTo(targetElement, headerHeight + 40); 
                }, 100); 
            }
        }
    }

    scrollToHash();

    document.querySelectorAll('a[href^="#"], a[href^="' + window.location.pathname + '#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            const href = this.getAttribute('href');
            let targetId;

            if (href.startsWith('#')) {
                targetId = href.substring(1);
            } else if (href.startsWith(window.location.pathname + '#')) {
                targetId = href.substring((window.location.pathname + '#').length);
            }

            if (targetId) {
                const targetElement = document.getElementById(targetId);
                if (targetElement) {
                    e.preventDefault(); 
                    const header = document.querySelector('.main-header');
                    const headerHeight = header ? header.offsetHeight : 0;
                    smoothScrollTo(targetElement, headerHeight + 20);
                }
            }
        });
    });

});
</script>